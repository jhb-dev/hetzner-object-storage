{"version":3,"sources":["../src/staticHandler.ts"],"sourcesContent":["import type * as AWS from '@aws-sdk/client-s3'\nimport type { StaticHandler } from '@payloadcms/plugin-cloud-storage/types'\nimport type { CollectionConfig } from 'payload'\nimport type { Readable } from 'stream'\n\nimport { getFilePrefix } from '@payloadcms/plugin-cloud-storage/utilities'\nimport path from 'path'\n\ninterface Args {\n  bucket: string\n  collection: CollectionConfig\n  getStorageClient: () => AWS.S3\n}\n\n// Type guard for NodeJS.Readable streams\nconst isNodeReadableStream = (body: unknown): body is Readable => {\n  return (\n    typeof body === 'object' &&\n    body !== null &&\n    'pipe' in body &&\n    typeof (body as any).pipe === 'function' &&\n    'destroy' in body &&\n    typeof (body as any).destroy === 'function'\n  )\n}\n\nconst destroyStream = (object: AWS.GetObjectOutput | undefined) => {\n  if (object?.Body && isNodeReadableStream(object.Body)) {\n    object.Body.destroy()\n  }\n}\n\n// Convert a stream into a promise that resolves with a Buffer\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst streamToBuffer = async (readableStream: any) => {\n  const chunks = []\n  for await (const chunk of readableStream) {\n    chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk)\n  }\n  return Buffer.concat(chunks)\n}\n\nexport const getHandler = ({ bucket, collection, getStorageClient }: Args): StaticHandler => {\n  return async (req, { params: { clientUploadContext, filename } }) => {\n    let object: AWS.GetObjectOutput | undefined = undefined\n    try {\n      const prefix = await getFilePrefix({ clientUploadContext, collection, filename, req })\n\n      const key = path.posix.join(prefix, filename)\n\n      object = await getStorageClient().getObject({\n        Bucket: bucket,\n        Key: key,\n      })\n\n      if (!object.Body) {\n        return new Response(null, { status: 404, statusText: 'Not Found' })\n      }\n\n      const etagFromHeaders = req.headers.get('etag') || req.headers.get('if-none-match')\n      const objectEtag = object.ETag\n\n      // Handle 304 Not Modified responses\n      if (etagFromHeaders && etagFromHeaders === objectEtag) {\n        return new Response(null, {\n          headers: new Headers({\n            'Accept-Ranges': String(object.AcceptRanges),\n            'Content-Length': String(object.ContentLength),\n            'Content-Type': String(object.ContentType),\n            ETag: String(object.ETag),\n          }),\n          status: 304,\n        })\n      }\n\n      // On error, manually destroy stream to close socket\n      if (object.Body && isNodeReadableStream(object.Body)) {\n        const stream = object.Body\n        stream.on('error', (err) => {\n          req.payload.logger.error({\n            err,\n            key,\n            msg: 'Error streaming Hetzner object, destroying stream',\n          })\n          stream.destroy()\n        })\n      }\n\n      const bodyBuffer = await streamToBuffer(object.Body)\n\n      return new Response(bodyBuffer, {\n        headers: new Headers({\n          'Accept-Ranges': String(object.AcceptRanges),\n          'Content-Length': String(object.ContentLength),\n          'Content-Type': String(object.ContentType),\n          ETag: String(object.ETag),\n        }),\n        status: 200,\n      })\n    } catch (err) {\n      req.payload.logger.error(err)\n      return new Response('Internal Server Error', { status: 500 })\n    } finally {\n      destroyStream(object)\n    }\n  }\n}\n"],"names":["getFilePrefix","path","isNodeReadableStream","body","pipe","destroy","destroyStream","object","Body","streamToBuffer","readableStream","chunks","chunk","push","Buffer","from","concat","getHandler","bucket","collection","getStorageClient","req","params","clientUploadContext","filename","undefined","prefix","key","posix","join","getObject","Bucket","Key","Response","status","statusText","etagFromHeaders","headers","get","objectEtag","ETag","Headers","String","AcceptRanges","ContentLength","ContentType","stream","on","err","payload","logger","error","msg","bodyBuffer"],"mappings":"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"}