{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  ClientUploadsConfig,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { NodeHttpHandlerOptions } from '@smithy/node-http-handler'\nimport type { Config, Plugin, UploadCollectionSlug } from 'payload'\n\nimport * as AWS from '@aws-sdk/client-s3'\nimport { cloudStoragePlugin } from './plugin.js'\nimport { initClientUploads } from '@payloadcms/plugin-cloud-storage/utilities'\n\nimport { getGenerateSignedURLHandler } from './generateSignedURL.js'\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\n\nexport type HetznerStorageOptions = {\n  /**\n   * Access control list for uploaded files.\n   * Hetzner supports 'private' and 'public-read'.\n   */\n  acl?: 'private' | 'public-read'\n\n  /**\n   * Bucket name to upload files to.\n   */\n  bucket: string\n\n  /**\n   * Cache-Control header value to set on uploaded files.\n   * For example: 'max-age=31536000' for 1 year cache.\n   */\n  cacheControl?: string\n\n  /**\n   * Do uploads directly on the client to bypass server upload limits.\n   * You must allow CORS PUT method for the bucket to your website.\n   */\n  clientUploads?: ClientUploadsConfig\n\n  /**\n   * Collection options to apply the Hetzner adapter to.\n   */\n  collections: Partial<Record<UploadCollectionSlug, Omit<CollectionOptions, 'adapter'> | true>>\n\n  /**\n   * Hetzner region for your bucket.\n   * Available regions: 'fsn1', 'nbg1', 'hel1'\n   */\n  region: 'fsn1' | 'nbg1' | 'hel1'\n\n  /**\n   * Credentials for accessing Hetzner Object Storage.\n   */\n  credentials: {\n    accessKeyId: string\n    secretAccessKey: string\n  }\n\n  /**\n   * Whether or not to disable local storage\n   *\n   * @default true\n   */\n  disableLocalStorage?: boolean\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n}\n\ntype HetznerStoragePlugin = (hetznerStorageArgs: HetznerStorageOptions) => Plugin\n\nlet storageClient: AWS.S3 | null = null\n\nconst defaultRequestHandlerOpts: NodeHttpHandlerOptions = {\n  httpAgent: {\n    keepAlive: true,\n    maxSockets: 100,\n  },\n  httpsAgent: {\n    keepAlive: true,\n    maxSockets: 100,\n  },\n}\n\nexport const hetznerStorage: HetznerStoragePlugin =\n  (hetznerStorageOptions: HetznerStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    const { region, credentials, bucket } = hetznerStorageOptions\n\n    // Configure S3 client with Hetzner-specific endpoint\n    const s3Config: AWS.S3ClientConfig = {\n      region: 'eu-central-1', // Hetzner uses eu-central-1 as region in the SDK\n      endpoint: `https://${region}.your-objectstorage.com`,\n      credentials: {\n        accessKeyId: credentials.accessKeyId,\n        secretAccessKey: credentials.secretAccessKey,\n      },\n      forcePathStyle: true, // Required for Hetzner Object Storage\n      requestHandler: defaultRequestHandlerOpts,\n    }\n\n    const getStorageClient: () => AWS.S3 = () => {\n      if (storageClient) {\n        return storageClient\n      }\n\n      storageClient = new AWS.S3(s3Config)\n      return storageClient\n    }\n\n    const isPluginDisabled = hetznerStorageOptions.enabled === false\n\n    initClientUploads({\n      clientHandler: '@joneslloyd/payload-storage-hetzner/client#HetznerClientUploadHandler',\n      collections: hetznerStorageOptions.collections,\n      config: incomingConfig,\n      enabled: !isPluginDisabled && Boolean(hetznerStorageOptions.clientUploads),\n      serverHandler: getGenerateSignedURLHandler({\n        access:\n          typeof hetznerStorageOptions.clientUploads === 'object'\n            ? hetznerStorageOptions.clientUploads.access\n            : undefined,\n        acl: hetznerStorageOptions.acl,\n        bucket: hetznerStorageOptions.bucket,\n        cacheControl: hetznerStorageOptions.cacheControl,\n        collections: hetznerStorageOptions.collections,\n        getStorageClient,\n      }),\n      serverHandlerPath: '/hetzner-storage-generate-signed-url',\n    })\n\n    if (isPluginDisabled) {\n      return incomingConfig\n    }\n\n    const adapter = hetznerStorageInternal(getStorageClient, hetznerStorageOptions)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      hetznerStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction hetznerStorageInternal(\n  getStorageClient: () => AWS.S3,\n  { acl, bucket, cacheControl, clientUploads, region }: HetznerStorageOptions,\n): Adapter {\n  return ({ collection, prefix }): GeneratedAdapter => {\n    return {\n      name: 'hetzner',\n      clientUploads,\n      generateURL: getGenerateURL({ bucket, region }),\n      handleDelete: getHandleDelete({ bucket, getStorageClient }),\n      handleUpload: getHandleUpload({\n        acl,\n        bucket,\n        cacheControl,\n        collection,\n        getStorageClient,\n        prefix,\n      }),\n      staticHandler: getHandler({ bucket, collection, getStorageClient }),\n    }\n  }\n}\n"],"names":["AWS","cloudStoragePlugin","initClientUploads","getGenerateSignedURLHandler","getGenerateURL","getHandleDelete","getHandleUpload","getHandler","storageClient","defaultRequestHandlerOpts","httpAgent","keepAlive","maxSockets","httpsAgent","hetznerStorage","hetznerStorageOptions","incomingConfig","region","credentials","bucket","s3Config","endpoint","accessKeyId","secretAccessKey","forcePathStyle","requestHandler","getStorageClient","S3","isPluginDisabled","enabled","clientHandler","collections","config","Boolean","clientUploads","serverHandler","access","undefined","acl","cacheControl","serverHandlerPath","adapter","hetznerStorageInternal","collectionsWithAdapter","Object","entries","reduce","acc","slug","collOptions","map","collection","upload","disableLocalStorage","prefix","name","generateURL","handleDelete","handleUpload","staticHandler"],"mappings":"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"}