{"version":3,"sources":["../src/handleUpload.ts"],"sourcesContent":["import type * as AWS from '@aws-sdk/client-s3'\nimport type { HandleUpload } from '@payloadcms/plugin-cloud-storage/types'\nimport type { CollectionConfig } from 'payload'\n\nimport { Upload } from '@aws-sdk/lib-storage'\nimport fs from 'fs'\nimport path from 'path'\n\ninterface Args {\n  acl?: 'private' | 'public-read'\n  bucket: string\n  cacheControl?: string\n  collection: CollectionConfig\n  getStorageClient: () => AWS.S3\n  prefix?: string\n}\n\n// Threshold for multipart upload, 50MB\nconst multipartThreshold = 1024 * 1024 * 50\n\nexport const getHandleUpload = ({\n  acl,\n  bucket,\n  cacheControl,\n  getStorageClient,\n  prefix = '',\n}: Args): HandleUpload => {\n  return async ({ data, file }) => {\n    const fileKey = path.posix.join(data.prefix || prefix, file.filename)\n\n    const fileBufferOrStream = file.tempFilePath\n      ? fs.createReadStream(file.tempFilePath)\n      : file.buffer\n\n    // For small files, use simpler putObject\n    if (file.buffer.length > 0 && file.buffer.length < multipartThreshold) {\n      await getStorageClient().putObject({\n        ACL: acl,\n        Body: fileBufferOrStream,\n        Bucket: bucket,\n        CacheControl: cacheControl,\n        ContentType: file.mimeType,\n        Key: fileKey,\n      })\n\n      return data\n    }\n\n    // For larger files, use multipart upload\n    const parallelUpload = new Upload({\n      client: getStorageClient(),\n      params: {\n        ACL: acl,\n        Body: fileBufferOrStream,\n        Bucket: bucket,\n        CacheControl: cacheControl,\n        ContentType: file.mimeType,\n        Key: fileKey,\n      },\n      partSize: multipartThreshold,\n      queueSize: 4, // Parallel parts to upload\n    })\n\n    await parallelUpload.done()\n\n    return data\n  }\n}\n"],"names":["Upload","fs","path","multipartThreshold","getHandleUpload","acl","bucket","cacheControl","getStorageClient","prefix","data","file","fileKey","posix","join","filename","fileBufferOrStream","tempFilePath","createReadStream","buffer","length","putObject","ACL","Body","Bucket","CacheControl","ContentType","mimeType","Key","parallelUpload","client","params","partSize","queueSize","done"],"mappings":"AAIA,SAASA,MAAM,QAAQ,uBAAsB;AAC7C,OAAOC,QAAQ,KAAI;AACnB,OAAOC,UAAU,OAAM;AAWvB,uCAAuC;AACvC,MAAMC,qBAAqB,OAAO,OAAO;AAEzC,OAAO,MAAMC,kBAAkB,CAAC,EAC9BC,GAAG,EACHC,MAAM,EACNC,YAAY,EACZC,gBAAgB,EAChBC,SAAS,EAAE,EACN;IACL,OAAO,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE;QAC1B,MAAMC,UAAUV,KAAKW,KAAK,CAACC,IAAI,CAACJ,KAAKD,MAAM,IAAIA,QAAQE,KAAKI,QAAQ;QAEpE,MAAMC,qBAAqBL,KAAKM,YAAY,GACxChB,GAAGiB,gBAAgB,CAACP,KAAKM,YAAY,IACrCN,KAAKQ,MAAM;QAEf,yCAAyC;QACzC,IAAIR,KAAKQ,MAAM,CAACC,MAAM,GAAG,KAAKT,KAAKQ,MAAM,CAACC,MAAM,GAAGjB,oBAAoB;YACrE,MAAMK,mBAAmBa,SAAS,CAAC;gBACjCC,KAAKjB;gBACLkB,MAAMP;gBACNQ,QAAQlB;gBACRmB,cAAclB;gBACdmB,aAAaf,KAAKgB,QAAQ;gBAC1BC,KAAKhB;YACP;YAEA,OAAOF;QACT;QAEA,yCAAyC;QACzC,MAAMmB,iBAAiB,IAAI7B,OAAO;YAChC8B,QAAQtB;YACRuB,QAAQ;gBACNT,KAAKjB;gBACLkB,MAAMP;gBACNQ,QAAQlB;gBACRmB,cAAclB;gBACdmB,aAAaf,KAAKgB,QAAQ;gBAC1BC,KAAKhB;YACP;YACAoB,UAAU7B;YACV8B,WAAW;QACb;QAEA,MAAMJ,eAAeK,IAAI;QAEzB,OAAOxB;IACT;AACF,EAAC"}