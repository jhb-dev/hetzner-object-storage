{"version":3,"sources":["../src/generateSignedURL.ts"],"sourcesContent":["import type { ClientUploadsAccess } from '@payloadcms/plugin-cloud-storage/types'\nimport type { PayloadHandler } from 'payload'\n\nimport * as AWS from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport path from 'path'\nimport { APIError, Forbidden } from 'payload'\n\nimport type { HetznerStorageOptions } from './index.js'\n\ninterface Args {\n  access?: ClientUploadsAccess\n  acl?: 'private' | 'public-read'\n  bucket: string\n  cacheControl?: string\n  collections: HetznerStorageOptions['collections']\n  getStorageClient: () => AWS.S3\n}\n\nconst defaultAccess: Args['access'] = ({ req }) => !!req.user\n\nexport const getGenerateSignedURLHandler = ({\n  access = defaultAccess,\n  acl,\n  bucket,\n  cacheControl,\n  collections,\n  getStorageClient,\n}: Args): PayloadHandler => {\n  return async (req) => {\n    if (!req.json) {\n      throw new APIError('Content-Type expected to be application/json', 400)\n    }\n\n    const { collectionSlug, filename, mimeType } = await req.json()\n\n    const collectionConfig = collections[collectionSlug]\n    if (!collectionConfig) {\n      throw new APIError(`Collection ${collectionSlug} was not found in Hetzner storage options`)\n    }\n\n    const prefix = (typeof collectionConfig === 'object' && collectionConfig.prefix) || ''\n\n    if (!(await access({ collectionSlug, req }))) {\n      throw new Forbidden()\n    }\n\n    const fileKey = path.posix.join(prefix, filename)\n\n    const url = await getSignedUrl(\n      getStorageClient(),\n      new AWS.PutObjectCommand({\n        ACL: acl,\n        Bucket: bucket,\n        CacheControl: cacheControl,\n        ContentType: mimeType,\n        Key: fileKey,\n      }),\n      {\n        expiresIn: 600, // URL expires in 10 minutes\n      },\n    )\n\n    return Response.json({ url })\n  }\n}\n"],"names":["AWS","getSignedUrl","path","APIError","Forbidden","defaultAccess","req","user","getGenerateSignedURLHandler","access","acl","bucket","cacheControl","collections","getStorageClient","json","collectionSlug","filename","mimeType","collectionConfig","prefix","fileKey","posix","join","url","PutObjectCommand","ACL","Bucket","CacheControl","ContentType","Key","expiresIn","Response"],"mappings":"AAGA,YAAYA,SAAS,qBAAoB;AACzC,SAASC,YAAY,QAAQ,gCAA+B;AAC5D,OAAOC,UAAU,OAAM;AACvB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,UAAS;AAa7C,MAAMC,gBAAgC,CAAC,EAAEC,GAAG,EAAE,GAAK,CAAC,CAACA,IAAIC,IAAI;AAE7D,OAAO,MAAMC,8BAA8B,CAAC,EAC1CC,SAASJ,aAAa,EACtBK,GAAG,EACHC,MAAM,EACNC,YAAY,EACZC,WAAW,EACXC,gBAAgB,EACX;IACL,OAAO,OAAOR;QACZ,IAAI,CAACA,IAAIS,IAAI,EAAE;YACb,MAAM,IAAIZ,SAAS,gDAAgD;QACrE;QAEA,MAAM,EAAEa,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAG,MAAMZ,IAAIS,IAAI;QAE7D,MAAMI,mBAAmBN,WAAW,CAACG,eAAe;QACpD,IAAI,CAACG,kBAAkB;YACrB,MAAM,IAAIhB,SAAS,CAAC,WAAW,EAAEa,eAAe,yCAAyC,CAAC;QAC5F;QAEA,MAAMI,SAAS,AAAC,OAAOD,qBAAqB,YAAYA,iBAAiBC,MAAM,IAAK;QAEpF,IAAI,CAAE,MAAMX,OAAO;YAAEO;YAAgBV;QAAI,IAAK;YAC5C,MAAM,IAAIF;QACZ;QAEA,MAAMiB,UAAUnB,KAAKoB,KAAK,CAACC,IAAI,CAACH,QAAQH;QAExC,MAAMO,MAAM,MAAMvB,aAChBa,oBACA,IAAId,IAAIyB,gBAAgB,CAAC;YACvBC,KAAKhB;YACLiB,QAAQhB;YACRiB,cAAchB;YACdiB,aAAaX;YACbY,KAAKT;QACP,IACA;YACEU,WAAW;QACb;QAGF,OAAOC,SAASjB,IAAI,CAAC;YAAES;QAAI;IAC7B;AACF,EAAC"}